#!/bin/sh
#
# Linux build script
#

# Exit on any unhandled error
set -e
[[ -n ${DEBUG-} ]] && set -x

# Vars
#
rootDir=$(dirname $0)

buildDir="$rootDir/_build"
toolsDir="$buildDir/tools"
packagesDir="$buildDir/lib/nuget"
packagesConfigFile="$rootDir/packages.config"

cakeVersion="$(sed -nE "s|\s*<package\s+id=\"Cake\"\s+version=\"(.+)\"\s*/>\s*|\1|p" $packagesConfigFile)"
cakeExe="$packagesDir/Cake.$cakeVersion/Cake.exe"

useExperimental=false


# Functions
#
function deb_packages {
    local pkgs=(nuget libcurl4-openssl-dev mono-complete)
    for pkg in ${pkgs[@]}; do
        if [[ ! $(dpkg -i $pkg 2>/dev/null) ]]; then
            echo "Error: $pkg is not installed"
            exit 1
        fi
    done
}

function rpm_packages {
    local pkgs=(nuget libcurl-devel mono-core)
    for pkg in ${pkgs[@]}; do
        if [[ ! $(rpm -q $pkg 2>/dev/null) ]]; then
            echo "Error: $pkg is not installed"
            exit 1
        fi
    done
}

function packages {
    if [[ $(which dpkg 2>/dev/null) ]]; then
        deb_packages
    elif [[ $(which dnf 2>/dev/null) ]]; then
        rpm_packages
    elif [[ $(which yum 2>/dev/null) ]]; then
        rpm_packages
    else
        echo "ERROR: You're using the linux build script on an unsupported system."
        exit 1
    fi
}

function install_cake {
    if [[ $(which nuget 2>/dev/null) ]]; then
        nuget install "$packagesConfigFile" -OutputDirectory "$packagesDir"
    else
        # We should probably be using in distro nuget, but this is left for legacy purposes.
        nugetVersion="2.8.6"
        nugetExe="$toolsDir/NuGet/$nugetVersion/nuget.exe"
        nugetDir="$(dirname $nugetExe)"
        [[ ! -d "$nugetDir" ]] && mkdir -p "$nugetDir"
        if [[ ! -f "$nugetExe" ]]; then
            echo "Downloading nuget from the internet. This method may be insecure."
            wget -o "$nugetExe" "https://dist.nuget.org/win-x86-commandline/v${nugetVersion}/nuget.exe"
        fi
        mono "$nugetExe" install "$packagesConfigFile" -OutputDirectory "$packagesDir"
    fi
}

function build {
    mono "$cakeExe" $cakeArgs
}


# Test Input
#
if [[ $# -gt 0 ]]; then
    cakeArgs=($@)
    case ${cakeArgs[0]} in
        -*)
            cakeArgs=("${cakeArgs[@]:1}" ${cakeArgs[0]})
            ;;
        *)
            cakeArgs=("${cakeArgs[@]:1}" --target=${cakeArgs[0]})
            ;;
    esac
else
    cakeArgs=""
fi

if $useExperimental; then
    cakeArgs="$cakeArgs --experimental"
fi

# Main
#
packages
install_cake
build

